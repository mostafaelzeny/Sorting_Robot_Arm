#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from orange_robot_interfaces.srv import CalculateAngles
import math

def inverse_kinematics_4dof(Xe, Ye, Ze, L1, L2, L3, L4, theta_total, elbow_up):
    theta1 = math.atan2(Ye, Xe)
    r1 = math.hypot(Xe, Ye)
    xB = r1 - L4 * math.cos(theta_total)
    yB = Ze - L4 * math.sin(theta_total)
    r_squared = xB**2 + yB**2
    D = (r_squared - L2**2 - L3**2) / (2 * L2 * L3)

    if abs(D) > 1:
        raise ValueError("Target unreachable")

    sin_theta3 = -math.sqrt(1 - D**2) if elbow_up else math.sqrt(1 - D**2)
    theta3 = math.atan2(sin_theta3, D)
    gamma = math.atan2(yB, xB)
    beta = math.atan2(L3 * math.sin(theta3), L2 + L3 * math.cos(theta3))
    theta2 = gamma - beta
    theta4 = theta_total - theta2 - theta3

    return [
        math.degrees(theta1),
        math.degrees(theta2),
        abs(math.degrees(theta3)),
        abs(math.degrees(theta4))
    ]

class AnglesCalculatorService(Node):
    def __init__(self):
        super().__init__('angles_calculator_service')

        self.service = self.create_service(CalculateAngles, 'calculate_angles', self.calculate_angles_callback)

        # Link lengths in cm (you can adjust these)
        self.L1 = 9.0    # base to shoulder
        self.L2 = 19.1   # shoulder to elbow
        self.L3 = 23.75  # elbow to wrist
        self.L4 = 23.83  # wrist to gripper
        self.get_logger().info("AnglesCalculatorService is ready.")

    def calculate_angles_callback(self, request, response):
        try:
            x, y = request.x, request.y
            z = -self.L1  # Arm moves in x-y plane at height -L1
            theta_total = math.radians(-90)
            elbow_up = True

            angles = inverse_kinematics_4dof(
                x, y, z,
                self.L1, self.L2, self.L3, self.L4,
                theta_total, elbow_up
            )
            response.angles = [float(a) for a in angles]
            self.get_logger().info(f"Calculated angles for ({x}, {y}) â†’ {response.angles}")
            return response

        except Exception as e:
            self.get_logger().error(f"IK failed: {e}")
            response.angles = []
            return response

def main(args=None):
    rclpy.init(args=args)
    node = AnglesCalculatorService()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    finally:
        node.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()
