#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from std_srvs.srv import Trigger
from geometry_msgs.msg import Point
from std_msgs.msg import Float32, Int8
from rclpy.action import ActionClient
from orange_robot_interfaces.action import ExecuteSequence
from orange_robot_interfaces.srv import CalculateAngles
import time

class StateController(Node):
    def __init__(self):
        super().__init__('state_controller')

        self.detect_orange_client = self.create_client(Trigger, 'detect_orange')
        self.ripeness_client = self.create_client(Trigger, 'check_ripeness')
        self.angle_client = self.create_client(CalculateAngles, 'calculate_angles')

        self.position = None
        self.diameter = None
        self.ripeness = None

        self.create_subscription(Point, 'position', self.position_callback, 10)
        self.create_subscription(Float32, 'diameter', self.diameter_callback, 10)
        self.create_subscription(Int8, 'ripeness', self.ripeness_callback, 10)

        self.arm_client = ActionClient(self, ExecuteSequence, 'execute_sequence')

        self.timer = self.create_timer(5.0, lambda: rclpy.get_global_executor().create_task(self.execute_cycle()))
        self.get_logger().info("State controller initialized.")

    def position_callback(self, msg):
        self.position = (msg.x, msg.y)

    def diameter_callback(self, msg):
        self.diameter = msg.data

    def ripeness_callback(self, msg):
        self.ripeness = int(msg.data)

    async def execute_cycle(self):
        self.get_logger().info("Starting new cycle...")

        for client in [self.detect_orange_client, self.ripeness_client, self.angle_client]:
            while not client.wait_for_service(timeout_sec=1.0):
                self.get_logger().warn(f"{client.srv_name} not available...")

        self.get_logger().info("Calling detect_orange...")
        response = await self.detect_orange_client.call_async(Trigger.Request())
        if not response.success:
            self.get_logger().warn("No orange detected.")
            return

        await self.wait_for_data('position and diameter')
        if self.position is None or self.diameter is None:
            self.get_logger().warn("No position or diameter data.")
            return

        x, y = self.position
        self.get_logger().info(f"Orange found at ({x:.2f}, {y:.2f}), diameter={self.diameter:.2f} cm")

        self.get_logger().info("Calling check_ripeness...")
        response = await self.ripeness_client.call_async(Trigger.Request())
        if not response.success:
            self.get_logger().warn("Ripeness check failed.")
            return

        await self.wait_for_data('ripeness')
        if self.ripeness is None:
            self.get_logger().warn("No ripeness data.")
            return

        self.get_logger().info(f"Ripeness = {'Ripe' if self.ripeness == 1 else 'Unripe'}")

        self.get_logger().info("Calling calculate_angles...")
        angle_req = CalculateAngles.Request()
        angle_req.x = x
        angle_req.y = y
        angle_response = await self.angle_client.call_async(angle_req)

        if not angle_response.angles:
            self.get_logger().warn("Angle calculation failed.")
            return

        self.get_logger().info(f"Calculated angles: {angle_response.angles}")

        self.arm_client.wait_for_server()
        goal_msg = ExecuteSequence.Goal()
        goal_msg.home = True
        goal_msg.detect = True
        goal_msg.ripe = (self.ripeness == 1)
        goal_msg.move_to_target = True
        goal_msg.grip = True
        goal_msg.place = True
        goal_msg.return_home = True
        goal_msg.angles = angle_response.angles  # ✅ add this to match updated action

        self.get_logger().info("Sending goal to ArduinoCommanderAction...")
        goal_handle = await self.arm_client.send_goal_async(goal_msg, feedback_callback=self.feedback_callback)
        result = await goal_handle.get_result_async()

        if result.result.success:
            self.get_logger().info(f"✅ Sequence complete: {result.result.result}")
        else:
            self.get_logger().error(f"❌ Failed: {result.result.result}")

        self.position = None
        self.diameter = None
        self.ripeness = None

    def feedback_callback(self, feedback_msg):
        self.get_logger().info(f"[Arduino feedback] {feedback_msg.feedback.feedback}")

    async def wait_for_data(self, what, timeout=5.0):
        start = time.time()
        while time.time() - start < timeout:
            if (what == 'position and diameter' and self.position and self.diameter) or \
               (what == 'ripeness' and self.ripeness is not None):
                return
            await rclpy.sleep(0.1)
        self.get_logger().warn(f"Timeout waiting for {what}.")

def main(args=None):
    rclpy.init(args=args)
    node = StateController()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    finally:
        node.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()
